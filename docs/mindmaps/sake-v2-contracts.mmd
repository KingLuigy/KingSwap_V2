Mind Map generated by NB MindMap plugin
> __version__=`1.1`,showJumps=`true`
---

# Sake v2

## SakeMaster

### deposit Uniswap LP tokens to farm SAKE

### \-\> SakeSwapFactory

#### \-\> SakeBar

#### SAKE\-WETH

## SakeMasterV2

## SakeToken
> collapsed=`true`


### is ERC20 token

### with checkpoints and delegation

## SakeMaker

### collect revenues, convert to SAKE, and send to SakeBar

### handles rewards for xSAKE holders

## SakeBar

### stake SAKE to earn more

### staking SAKE token

#### handles swapping to and from xSAKE

### is xSAKE token

## Governance contracts
> collapsed=`true`,leftSide=`true`


### GovernarAlpha

### Timelock
> collapsed=`true`


#### enque TXs \(on proposals\)

### SakeVoterProxy

### SakeVoterCalc

## SakeDrinker
> leftSide=`true`


### burns uniV2 tokens ???

## SakeLock
> collapsed=`true`


### is SakeLock token

### mints 1 SakeLock and \.\.\.
> collapsed=`true`


#### deposits 1 SakeLock witn SakeMaster

## SakeUni

### is NOT token

### it holds tokens

#### UNI token

##### collected on updatePool\(\_pid\)

###### pool\.uniStaking\.getReward\(\)

#### SAKE token

### two kinds of rewards to users

#### sakeReward

##### amount defined by contract

###### sakePerBlock

##### in SAKE token

#### uniReward

##### pool\.uniStaking\.getReward\(\)

##### amount defined by LP pool

##### in UNI token

### multiple LP pools

#### common UNI token for all pools

##### IERC20 public uniToken

#### own LP token for a pool

#### struct PoolInfo

##### IERC20 lpToken<br/>// staking LP token on uniswap<br/>IStakingRewards uniStaking<br/>uint256 accSakePerShare<br/>uint256 accUniPerShare<br/>\.\.\.
> align=`left`


### fees on withdrawal

#### in LP tokens

##### lpTokenFeeRatio

#### in UNI tokens

##### uniFeeRatio

### deposit\(\_pid, \_amount\)

#### user deposits LP token

##### to pool\.uniStake

##### for SAKE allocaltion

#### it transfers LP tokens from user to pool\.uniStaking

#### \_amount \- in LP tokens

### withdraw\(\_pid, \_amount\)

#### user withdraws LP tokens

#### \_amount \- in LP tokens

#### it transfers SAKE token

##### to the user

##### from address\(this\)

##### which are pending

#### it transfers UNI token

##### to the user

##### from address\(this\)

##### less fees

###### transferred to uniTokenFeeReceiver

#### it transfers LP token

##### to the user

##### from pool\.uniStaking

##### less fees

###### transferred to lpTokenFeeReceiver

## SakeUniV2

### is WULP token

#### i\.e\. Wrapped Uniswap LP token

### like SakeUni

#### it rewards/holds/transfers SAKE token

##### collected on updatePool\(\_pid\)

###### uniStaking\.getReward\(\)

##### collected from SakeMaster

###### on updatePool\(\)

#### it holds/transfers UNI token

#### it stakes LP token with uniStaking

#### it migrates LP token

##### if activated

### unlike SakeUni

#### is WULP token

#### it handles WULP

##### it mints WULP

##### it burns WULP

##### it stakes WULP

###### for user

###### with SakeMaster

####### that rewards SakeUniV2 with SAKE tokens

#### it handles single LP pool

#### if not already migrated

##### than only it allows LP token deposits

##### than only it withdraws LP token from uniStaking

#### owner only may migrate

### deposit\(uint256 \_amount\)

#### if not already migrated

#### user deposits LP token

#####  to SakeMaster

#####  for SAKE allocation

##### it transfers LP tokens from user to uniStaking

#### \_amount \- in LP tokens

#### in mints and stakes WULP

##### it stakes WULP with SakeMaster

##### it transfers minted WULP to SakeMaster

### withdraw\(\_amount\)

#### \_amount \- in LP tokens

#### it transfers SAKE

##### which are pending

##### to user

##### from itself

###### collecting rewarded from SakeMaster

#### if not yet migrated

##### it withdwraws LP tokens

###### from uniStaking

##### it withdraws WULP

###### from SakeMaster

#### it burns WULP

##### it transfers withdrawn WULP to nowhere

## STokenMaster
> collapsed=`true`


### new features
> collapsed=`true`


#### multiplierSToken

#### withdrawSwitch

#### feeRatio

#### burnSakeForPool

#### admin \(extra to owner\)

#### sToken
> collapsed=`true`


##### pool\.sToken

##### user\.amountStoken

### like SakeMaster but with SToken supported
> collapsed=`true`


#### struct UserInfo \{<br/>  // How many  tokens the user has provided,LP\+SToken\*multiplier<br/>  uint256 amount;<br/>  // How many S tokens the user has provided<br/>  uint256 amountStoken;<br/>  // How many LP tokens the user has provided<br/>  uint256 amountLPtoken;<br/>  uint256 rewardDebt;<br/>\}
> align=`left`


## SakeSwap contracts
> collapsed=`true`


### SakeSwapSlippageToken
> collapsed=`true`


#### is SST token
> collapsed=`true`


##### SakeSwap Slippage Token

#### newName: KingSwapSlippageToken

### SakeSwapERC20
> collapsed=`true`


#### is SLP
> collapsed=`true`


##### Sakeswap LP token

#### function permit
> collapsed=`true`


##### approve by signature

### SakeSwapPair
> collapsed=`true`


#### modified UniswapV2Pair

#### is is SakeSwapERC20

#### unlike UniswapV2Pair
> collapsed=`true`


##### new functions
> collapsed=`true`


###### // public/external writes to the storage<br/>function dealSlippageWithIn\(path, amountIn, to, ifmint\)<br/>function dealSlippageWithOut\(path, amountIn, to, ifmint\)<br/><br/>// public/external view<br/>function getVirtualPrice\(\)<br/>function getTokenMarketPrice\(token\)<br/>function getAmountOutMarket\(token, amountIn\)<br/>function getAmountInMarket\(token, amountOut\)<br/>function getAmountOutPool\(token, amountIn\)<br/>function getAmountInPool\(token, amountOut\)<br/>function getAmountOutFinal\(token, amountIn\)<br/>function getAmountInFinal\(token, amountOut\)<br/><br/>// internal<br/>function \_updateVirtualPrice<br/>function \_getToken0MarketPrice<br/>function \_getAmountOut<br/>function \_getAmountIn<br/>function getAmountOutReal<br/>function getAmountInReal<br/>
> align=`left`


##### new storage vars
> collapsed=`true`


###### uint224 private virtualPrice;<br/>uint32 private lastPriceTime;

###### SakeSwapSlippageToken public stoken

##### modified functions
> collapsed=`true`


###### function mint\(address to\)
> collapsed=`true`


####### address migrator = ISakeSwapFactory\(factory\)\.migrator\(\)

###### function initialize
> collapsed=`true`


####### stoken = new SakeSwapSlippageToken\(0\);

###### function swap
> collapsed=`true`


####### \_updateVirtualPrice\(\_reserve0, \_reserve1\);

### SakeSwapFactory

### SakeSwapRouter

## Tools contracts
> collapsed=`true`,leftSide=`true`


### SakeSwapMigrator
> collapsed=`true`


####  Migrates from SUSHISWAP/UNISWAP to SAKESWAP

#### function migrateUniswapWithPermit

#### migrateSushiSwapWithPermit

#### function migrateUniswap

#### uniFactory = IFactory\(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f\);<br/>uniRouter = IRouter\(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\);
> collapsed=`true`


##### UniswapV2Factory<br/>Uniswap V2: Router 2

### SakeSwapBatchTrade

## Migrator
> collapsed=`true`


### Migrate SakeMaster LP tokens from UniSwap/SushiSwap to SakeSwap
> collapsed=`true`


#### from Uni/Sushi factory

#### to SakeSwapFactory

### instances
> collapsed=`true`


#### Migrate\-uniswap

#### Migrate\-sushiswap

### function migrate\(ISakeSwapPair orig\)
> collapsed=`true`


#### only Chief may run

#### notBeforeBlock

#### \`orig\` Pair from Uni/Sushi factory

#### creates SakeSwapPair
> collapsed=`true`


##### on SakeSwapFactory

##### if not exists

#### burns \`orig\` LP tokens
> collapsed=`true`


##### transfers LP tokens
> collapsed=`true`


###### from Chief

###### to \`orig\` Pair

##### \.\.\. and burns

#### mints LP tokens on SakeSwapPair
