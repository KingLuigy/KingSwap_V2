Mind Map generated by NB MindMap plugin
> __version__=`1.1`,showJumps=`true`
---

# Sake v2

## SakeToken

### is ERC20 token

### with checkpoints and delegation

## SakeMaster

### deposit Uniswap LP tokens to farm SAKE

### \-\> SakeSwapFactory

#### \-\> SakeBar

#### SAKE\-WETH

### mints SAKE

## SakeMasterV2

### unlike V1

#### no migrator/migration

#### trade mining

##### on top of liquidity mining

#### fees on withdrawal

##### of SAKE

###### sent to sakeFeeAddress

####### set to SakeBar

####### owner may change address

##### of LP token

###### sent to sakeMaker

####### set to SakeMaker

#### deposit in SToken

##### on top of LP Token

#### pool\.sakeLockSwitch

##### // true \- SAKE withdraw interval, default 1 months<br/>// false \- no withdraw interval, but have SAKE withdraw fee, default 10%
> align=`left`


### mints SAKE

#### if set as SAKE owner

## SakeMaker
> collapsed=`true`


### collect revenues, convert to SAKE, and send to SakeBar
> collapsed=`true`


#### rewards for xSAKE holders

### via SakeSwapFactory

### address public bar
> collapsed=`true`


#### set to SakeBar

## SakeBar

### handles swapping to and from xSAKE

### is xSAKE token

#### staking SAKE token

### converts SAKE into xSAKE and back

#### king\.transferFrom\(msg\.sender, address\(this\), \_amount\)

#### \_mint\(msg\.sender, \_amount\)

### it is set

#### as SakeFeeAddress

##### in SakeMasterV2

#### as Bar

##### in SakeMaker

## Governance contracts
> leftSide=`true`


### GovernarAlpha

### Timelock

#### enque TXs \(on proposals\)

### SakeVoterProxy

### SakeVoterCalc

#### collects votes from

##### KingToken<br/>RoundTable<br/>STokenMaster<br/>Archbishop<br/>ArchbishopV2
> align=`left`


## SakeDrinker
> collapsed=`true`


### swaps UNI to SAKE and freezes it forever
> collapsed=`true`


#### function convert\(\)

#### takes all UNI it holds
> collapsed=`true`


##### received from SakeUniV2

#### swaps UNI to SAKE
> collapsed=`true`


##### via SakeSwapFactory
> collapsed=`true`


###### with UNI\-SAKE pair

##### sending SAKE to unaccessible address

### it is set
> collapsed=`true`


#### in SakeUniV2 instances
> collapsed=`true`


##### uniTokenFeeReceiver

## SakeLock

### is SakeLock token

### mints 1 SakeLock and \.\.\.

#### deposits 1 SakeLock witn SakeMaster

### address withDrawAddr

#### function setwithdrawContractAddr

#### set to SakeMasterV2

##### before that to STokenMaster

## SakeUni
> collapsed=`true`


### It
> collapsed=`true`


#### stakes user' LP token \(uni v2\)
> collapsed=`true`


##### to UniStake
> collapsed=`true`


###### UniStake rewords with more Uni

##### collects and holds Uni

#### accrues Sake rewards with every block
> collapsed=`true`


##### like SakeMaster does

#### rewards user with
> collapsed=`true`


##### Uni tokens

##### Sake tokens

#### one instance for many pools

### it holds tokens
> collapsed=`true`


#### UNI token
> collapsed=`true`


##### collected
> collapsed=`true`


###### as reward from UniStake

###### on "on updatePool\(\_pid\)" call
> collapsed=`true`


####### pool\.uniStaking\.getReward\(\)

#### SAKE token
> collapsed=`true`


##### which somehow get transferred to it

### is NOT token

### two kinds of rewards to users
> collapsed=`true`


#### sakeReward
> collapsed=`true`


##### amount defined by contract
> collapsed=`true`


###### sakePerBlock

##### in SAKE token

#### uniReward
> collapsed=`true`


##### pool\.uniStaking\.getReward\(\)

##### amount defined by LP pool
> collapsed=`true`


###### in proportion to staked LP token amount

##### in UNI token

### multiple LP pools
> collapsed=`true`


#### common UNI token for all pools
> collapsed=`true`


##### IERC20 public uniToken

#### own LP token for a pool

#### struct PoolInfo
> collapsed=`true`


##### IERC20 lpToken<br/>// staking LP token on uniswap<br/>IStakingRewards uniStaking<br/>uint256 accSakePerShare<br/>uint256 accUniPerShare<br/>\.\.\.
> align=`left`


### fees on withdrawal
> collapsed=`true`


#### in LP tokens
> collapsed=`true`


##### lpTokenFeeRatio

#### in UNI tokens
> collapsed=`true`


##### uniFeeRatio

#### sent to uniTokenFeeReceiver

### deposit\(\_pid, \_amount\)
> collapsed=`true`


#### user deposits LP token
> collapsed=`true`


##### to pool\.uniStake

##### for SAKE allocaltion

#### it transfers LP tokens from user to pool\.uniStaking

#### \_amount \- in LP tokens

### withdraw\(\_pid, \_amount\)
> collapsed=`true`


#### user withdraws LP tokens

#### \_amount \- in LP tokens

#### it transfers SAKE token
> collapsed=`true`


##### to the user

##### from address\(this\)

##### which are pending

#### it transfers UNI token
> collapsed=`true`


##### to the user

##### from address\(this\)

##### less fees
> collapsed=`true`


###### transferred to uniTokenFeeReceiver

##### which are pending

#### it transfers LP token
> collapsed=`true`


##### to the user

##### from pool\.uniStaking

##### less fees
> collapsed=`true`


###### transferred to lpTokenFeeReceiver

###### if staked peroid \< MIN\_WITHDRAW\_INTERVAL

### function migrate\(\_pid\)
> collapsed=`true`


#### migrator\.migrate\(lpToken\)
> collapsed=`true`


##### like SakeMaster\.migrate does

#### anyone can call

#### if migrator is set

## SakeUniV2
> collapsed=`true`


### It
> collapsed=`true`


#### stakes user' LP token \(uni v2\)
> collapsed=`true`


##### to UniStake
> collapsed=`true`


###### UniStake rewords with more Uni

##### collects and holds Uni

#### mints WULP against LP
> collapsed=`true`


##### stakes WULP
> collapsed=`true`


###### with SakeMaster \(V1\)
> collapsed=`true`


####### SakeMaster rewards with Sake

#### rewards user with
> collapsed=`true`


##### Uni tokens

##### Sake tokens

#### deployed few instances
> collapsed=`true`


##### USDT\-ETH WULP

##### USDC\-ETH WULP

##### DAI\-ETH WULP

##### WBTC\-ETH WULP

### is WULP token
> collapsed=`true`


#### i\.e\. Wrapped Uniswap LP token

### like SakeUni
> collapsed=`true`


#### it rewards/holds/transfers SAKE token
> collapsed=`true`


##### collected on updatePool\(\_pid\)
> collapsed=`true`


###### uniStaking\.getReward\(\)

##### collected from SakeMaster
> collapsed=`true`


###### on updatePool\(\)

#### it holds/transfers UNI token

#### it stakes LP token with uniStaking

#### it migrates LP token
> collapsed=`true`


##### if activated

### unlike SakeUni
> collapsed=`true`


#### is WULP token

#### it handles WULP
> collapsed=`true`


##### it mints WULP

##### it burns WULP

##### it stakes WULP
> collapsed=`true`


###### for user

###### to SakeMaster
> collapsed=`true`


####### that rewards SakeUniV2 with SAKE tokens

#### it handles single LP pool

#### if not already migrated
> collapsed=`true`


##### than only it allows LP token deposits

##### than only it withdraws LP token from uniStaking

#### owner only may migrate

#### it does not take part of LP token amount as fees on withdrawal

### deposit\(uint256 \_amount\)
> collapsed=`true`


#### if not already migrated

#### user deposits LP token

#### \_amount \- in LP tokens

#### it transfers LP tokens
> collapsed=`true`


##### from user

##### to UniStaling contract

##### to mint Uni

#### it mints and stakes WULP
> collapsed=`true`


##### with SakeMaster
> collapsed=`true`


######  for SAKE minting

##### it transfers minted WULP to SakeMaster

### withdraw\(\_amount\)
> collapsed=`true`


#### \_amount \- in LP tokens

#### it transfers SAKE
> collapsed=`true`


##### which are pending

##### to user

##### from itself
> collapsed=`true`


###### collecting rewarded from SakeMaster

#### if not yet migrated
> collapsed=`true`


##### it withdwraws LP tokens
> collapsed=`true`


###### from uniStaking
> collapsed=`true`


####### to user

####### fees in UNI
> collapsed=`true`


######## to uniTokenFeeReceiver
> collapsed=`true`


######### to SakeDrinker

##### it withdraws WULP
> collapsed=`true`


###### from SakeMaster

#### it burns WULP
> collapsed=`true`


##### it transfers withdrawn WULP to nowhere

##### it transfers LP token to user

### migrate\(\)
> collapsed=`true`


#### only owner may call

#### works if migrator is set

#### does
> collapsed=`true`


##### archbishop\.withdraw\(poolIdInArchbishop, totalSupply\(\)\)

##### lpToken\.safeApprove\(address\(migrator\), bal\);

##### IERC20 newLpToken = migrator\.migrate\(lpToken\)

##### lpToken = newLpToken

## STokenMaster
> collapsed=`true`


### new features
> collapsed=`true`


#### multiplierSToken

#### withdrawSwitch

#### feeRatio

#### burnSakeForPool

#### admin \(extra to owner\)

#### sToken
> collapsed=`true`


##### pool\.sToken

##### user\.amountStoken

### like SakeMaster but with SToken supported
> collapsed=`true`


#### struct UserInfo \{<br/>  // How many  tokens the user has provided,LP\+SToken\*multiplier<br/>  uint256 amount;<br/>  // How many S tokens the user has provided<br/>  uint256 amountStoken;<br/>  // How many LP tokens the user has provided<br/>  uint256 amountLPtoken;<br/>  uint256 rewardDebt;<br/>\}
> align=`left`


### mints SAKE
> collapsed=`true`


#### if set as SAKE owner

### similar to SakeMasterV2
> collapsed=`true`


#### unlike SakeMasterV2
> collapsed=`true`


##### does not send collected fees to SakeMaker

##### burns SAKE for pool
> collapsed=`true`


###### user may burn own SAKE tokens

##### does not give trading reward
> collapsed=`true`


###### gives only LP mining reward

##### does not have pool\.sakeLockSwitch

##### has withdrawSwitch; // if true,user can withdraw lp,otherwise can not

## SakeSwap contracts
> collapsed=`true`


### SakeSwapSlippageToken
> collapsed=`true`


#### is SST token
> collapsed=`true`


##### SakeSwap Slippage Token

### SakeSwapERC20
> collapsed=`true`


#### is SLP
> collapsed=`true`


##### Sakeswap LP token

#### ERC 20 functions and\.\.\.
> collapsed=`true`


##### function permit
> collapsed=`true`


###### approve by signature

### SakeSwapPair
> collapsed=`true`


#### modified UniswapV2Pair

#### is is SakeSwapERC20

#### unlike UniswapV2Pair
> collapsed=`true`


##### new functions
> collapsed=`true`


###### // public/external writes to the storage<br/>function dealSlippageWithIn\(path, amountIn, to, ifmint\)<br/>function dealSlippageWithOut\(path, amountIn, to, ifmint\)<br/><br/>// public/external view<br/>function getVirtualPrice\(\)<br/>function getTokenMarketPrice\(token\)<br/>function getAmountOutMarket\(token, amountIn\)<br/>function getAmountInMarket\(token, amountOut\)<br/>function getAmountOutPool\(token, amountIn\)<br/>function getAmountInPool\(token, amountOut\)<br/>function getAmountOutFinal\(token, amountIn\)<br/>function getAmountInFinal\(token, amountOut\)<br/><br/>// internal<br/>function \_updateVirtualPrice<br/>function \_getToken0MarketPrice<br/>function \_getAmountOut<br/>function \_getAmountIn<br/>function getAmountOutReal<br/>function getAmountInReal<br/>
> align=`left`


##### new storage vars
> collapsed=`true`


###### uint224 private virtualPrice;<br/>uint32 private lastPriceTime;

###### SakeSwapSlippageToken public stoken

##### modified functions
> collapsed=`true`


###### function mint\(address to\)
> collapsed=`true`


####### address migrator = ISakeSwapFactory\(factory\)\.migrator\(\)

###### function initialize
> collapsed=`true`


####### stoken = new SakeSwapSlippageToken\(0\);

###### function swap
> collapsed=`true`


####### \_updateVirtualPrice\(\_reserve0, \_reserve1\);

### SakeSwapFactory

### SakeSwapRouter

## Migrator
> collapsed=`true`


### Migrates LP tokens
> collapsed=`true`


#### which users have already deposited
> collapsed=`true`


##### to SakeMaster

##### which SakeMaster holds
> collapsed=`true`


###### in Uni/Sushi pairs

#### from Uni/Sushi factory
> collapsed=`true`


##### UniswapV2Factory

#### to SakeSwapFactory
> collapsed=`true`


##### same SakeSwap factory for two Migrator instances

### instances
> collapsed=`true`


#### Migrate\-Uniswap
> collapsed=`true`


##### "orig": Uniswap factory
> collapsed=`true`


###### UniswapV2Factory

##### "new": SakeSwap factory

#### Migrate\-Sushiswap
> collapsed=`true`


##### "orig": SushiSwap factory
> collapsed=`true`


###### clone of UniswapV2Factory

##### "new": SakeSwap factory

#### an instance for a pair of factories
> collapsed=`true`


##### new factory

##### old factory

### function migrate\(ISakeSwapPair orig\)
> collapsed=`true`


#### only Chief may run

#### notBeforeBlock

#### \`orig\` Pair from Uni/Sushi factory

#### creates SakeSwapPair
> collapsed=`true`


##### on SakeSwapFactory

##### if not exists

#### burns \`orig\` LP tokens
> collapsed=`true`


##### transfers "old" LP tokens
> collapsed=`true`


###### from SakeMaster

###### to \`orig\` Pair

##### \.\.\. and burns "old" LP tokens

##### receives underlying asset tokens

#### mints LP tokens on SakeSwapPair
> collapsed=`true`


##### transfers underlying asset tokens

### works with Factories

### implements "interfact IMigratorChef"
> collapsed=`true`


#### function migrate\(ISakeSwapPair orig\)
> collapsed=`true`


##### explicit

#### uint256 public desiredLiquidity
> collapsed=`true`


##### implicit

## SakeSwapMigrator
> collapsed=`true`


### Migrate user' UniSwap/SushiSwap LP tokens directly to SakeSwap LP tokens
> collapsed=`true`


#### unlike Migrator
> collapsed=`true`


##### with Migrator
> collapsed=`true`


###### user has already deposited
> collapsed=`true`


####### with SakeMaster

####### his/her "old" LP tokens

###### owner migrates "old" LP tokens
> collapsed=`true`


####### of all users

##### with SakeSwapMigrator
> collapsed=`true`


###### user may migrate own "old" LP token

### for UniswapV2 routers

### Works with Routers
> collapsed=`true`


#### from "old" router
> collapsed=`true`


##### "removeLiquidity"

#### to "new" router
> collapsed=`true`


##### "addLiquidity"

#### one instance
> collapsed=`true`


##### for two "old" routers
> collapsed=`true`


###### SushiSwap router

###### Uniswap router

##### one "new" router
> collapsed=`true`


###### SakeSwap router

### Analog to SushiSwapMigratorV2
> collapsed=`true`


####     function migrate\(tokenA, tokenB, uint liquidity, amountAMin, amountBMin, deadline\)

### "migrate" functions
> collapsed=`true`


#### function migrateUniswap\(token0, token1, value\)

#### function migrateSushiSwap\(token0, token1, value\)

#### function migrateUniswapWithPermit

#### function migrateSushiSwapWithPermit

#### any "old" LP token holder can call

#### internally call
> collapsed=`true`


##### function \_migrate\(IRouter router, ISakeSwapERC20 pair, address token0, address token1, uint256 value\)
> collapsed=`true`


###### pair\.transferFrom\(msg\.sender, address\(this\), value\)

###### router\.removeLiquidity\(\.\.\., address\(this\), value\)

###### token0\.approve\(kingRouter, bal0\);<br/>token1\.approve\(kingRouter, bal1\);

###### kingRouter\.addLiquidity\(\.\.\., msg\.sender\)

## SakeSwapBatchTrade
> leftSide=`true`


## StakingRewards
> leftSide=`true`


### UniStake\.sol
