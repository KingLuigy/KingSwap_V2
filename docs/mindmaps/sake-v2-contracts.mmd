Mind Map generated by NB MindMap plugin
> __version__=`1.1`
---

# Sake v2

## SakeMaster

### deposit Uniswap LP tokens to farm SAKE

### \-\> SakeSwapFactory

#### \-\> SakeBar

#### SAKE\-WETH

### mints SAKE

## SakeMasterV2

### unlike V1

#### no migrator/migration

#### trade mining

##### on top of liquidity mining

#### fees on withdrawal

##### transferred to SakeMaker

#### deposit in SToken

##### on top of LP Token

#### pool\.sakeLockSwitch

##### // true \- SAKE withdraw interval, default 1 months<br/>// false \- no withdraw interval, but have SAKE withdraw fee, default 10%
> align=`left`


### mints SAKE

#### if set as SAKE owner

## SakeToken

### is ERC20 token

### with checkpoints and delegation

## SakeMaker

### collect revenues, convert to SAKE, and send to SakeBar

### handles rewards for xSAKE holders

### via SakeSwapFactory

## SakeBar

### handles swapping to and from xSAKE

### is xSAKE token

#### staking SAKE token

### converts SAKE into xSAKE and back

#### king\.transferFrom\(msg\.sender, address\(this\), \_amount\)

#### \_mint\(msg\.sender, \_amount\)

## Governance contracts
> leftSide=`true`


### GovernarAlpha

### Timelock

#### enque TXs \(on proposals\)

### SakeVoterProxy

### SakeVoterCalc

#### collects votes from

##### KingToken<br/>RoundTable<br/>STokenMaster<br/>Archbishop<br/>ArchbishopV2
> align=`left`


## SakeDrinker

### swaps UNI to SAKE and freezes it forever

#### function convert\(\)

#### takes all UNI it holds

#### swaps UNI to SAKE

##### via SakeSwapFactory

###### with UNI\-SAKE pair

##### sending SAKE to unaccessible address

## SakeLock

### is SakeLock token

### mints 1 SakeLock and \.\.\.

#### deposits 1 SakeLock witn SakeMaster

## SakeUni

### It

#### stakes user' LP token \(uni v2\)

##### to UniStake

###### UniStake rewords with more Uni

##### collects and holds Uni

#### accrues Sake rewards with every block

##### like SakeMaster does

#### rewards user with

##### Uni tokens

##### Sake tokens

#### one instance for many pools

### it holds tokens

#### UNI token

##### collected

###### as reward from UniStake

###### on "on updatePool\(\_pid\)" call

####### pool\.uniStaking\.getReward\(\)

#### SAKE token

##### which somehow get transferred to it

### is NOT token

### two kinds of rewards to users

#### sakeReward

##### amount defined by contract

###### sakePerBlock

##### in SAKE token

#### uniReward

##### pool\.uniStaking\.getReward\(\)

##### amount defined by LP pool

###### in proportion to staked LP token amount

##### in UNI token

### multiple LP pools

#### common UNI token for all pools

##### IERC20 public uniToken

#### own LP token for a pool

#### struct PoolInfo

##### IERC20 lpToken<br/>// staking LP token on uniswap<br/>IStakingRewards uniStaking<br/>uint256 accSakePerShare<br/>uint256 accUniPerShare<br/>\.\.\.
> align=`left`


### fees on withdrawal

#### in LP tokens

##### lpTokenFeeRatio

#### in UNI tokens

##### uniFeeRatio

### deposit\(\_pid, \_amount\)

#### user deposits LP token

##### to pool\.uniStake

##### for SAKE allocaltion

#### it transfers LP tokens from user to pool\.uniStaking

#### \_amount \- in LP tokens

### withdraw\(\_pid, \_amount\)

#### user withdraws LP tokens

#### \_amount \- in LP tokens

#### it transfers SAKE token

##### to the user

##### from address\(this\)

##### which are pending

#### it transfers UNI token

##### to the user

##### from address\(this\)

##### less fees

###### transferred to uniTokenFeeReceiver

##### which are pending

#### it transfers LP token

##### to the user

##### from pool\.uniStaking

##### less fees

###### transferred to lpTokenFeeReceiver

###### if staked peroid \< MIN\_WITHDRAW\_INTERVAL

### function migrate\(\_pid\)

#### migrator\.migrate\(lpToken\)

##### like SakeMaster\.migrate does

#### anyone can call

#### if migrator is set

## SakeUniV2

### It

#### stakes user' LP token \(uni v2\)

##### to UniStake

###### UniStake rewords with more Uni

##### collects and holds Uni

#### mints WULP against LP

##### stakes WULP

###### with SakeMaster \(V1\)

####### SakeMaster rewards with Sake

#### rewards user with

##### Uni tokens

##### Sake tokens

#### deployed few instances

##### USDT\-ETH WULP

##### USDC\-ETH WULP

##### DAI\-ETH WULP

##### WBTC\-ETH WULP

### is WULP token

#### i\.e\. Wrapped Uniswap LP token

### like SakeUni

#### it rewards/holds/transfers SAKE token

##### collected on updatePool\(\_pid\)

###### uniStaking\.getReward\(\)

##### collected from SakeMaster

###### on updatePool\(\)

#### it holds/transfers UNI token

#### it stakes LP token with uniStaking

#### it migrates LP token

##### if activated

### unlike SakeUni

#### is WULP token

#### it handles WULP

##### it mints WULP

##### it burns WULP

##### it stakes WULP

###### for user

###### to SakeMaster

####### that rewards SakeUniV2 with SAKE tokens

#### it handles single LP pool

#### if not already migrated

##### than only it allows LP token deposits

##### than only it withdraws LP token from uniStaking

#### owner only may migrate

#### it does not take part of LP token amount as fees on withdrawal

### deposit\(uint256 \_amount\)

#### if not already migrated

#### user deposits LP token

#### \_amount \- in LP tokens

#### it transfers LP tokens

##### from user

##### to UniStaling contract

##### to mint Uni

#### it mints and stakes WULP

##### with SakeMaster

######  for SAKE minting

##### it transfers minted WULP to SakeMaster

### withdraw\(\_amount\)

#### \_amount \- in LP tokens

#### it transfers SAKE

##### which are pending

##### to user

##### from itself

###### collecting rewarded from SakeMaster

#### if not yet migrated

##### it withdwraws LP tokens

###### from uniStaking

##### it withdraws WULP

###### from SakeMaster

#### it burns WULP

##### it transfers withdrawn WULP to nowhere

##### it transfers LP token to user

### migrate\(\)

#### only owner may call

#### works if migrator is set

#### does

##### archbishop\.withdraw\(poolIdInArchbishop, totalSupply\(\)\)

##### lpToken\.safeApprove\(address\(migrator\), bal\);

##### IERC20 newLpToken = migrator\.migrate\(lpToken\)

##### lpToken = newLpToken

## STokenMaster

### new features

#### multiplierSToken

#### withdrawSwitch

#### feeRatio

#### burnSakeForPool

#### admin \(extra to owner\)

#### sToken

##### pool\.sToken

##### user\.amountStoken

### like SakeMaster but with SToken supported

#### struct UserInfo \{<br/>  // How many  tokens the user has provided,LP\+SToken\*multiplier<br/>  uint256 amount;<br/>  // How many S tokens the user has provided<br/>  uint256 amountStoken;<br/>  // How many LP tokens the user has provided<br/>  uint256 amountLPtoken;<br/>  uint256 rewardDebt;<br/>\}
> align=`left`


### mints SAKE

#### if set as SAKE owner

### similar to SakeMasterV2

#### unlike SakeMasterV2

##### does not send collected fees to SakeMaker

##### burns SAKE for pool

###### user may burn own SAKE tokens

##### does not give trading reward

###### gives only LP mining reward

##### does not have pool\.sakeLockSwitch

##### has withdrawSwitch; // if true,user can withdraw lp,otherwise can not

## SakeSwap contracts

### SakeSwapSlippageToken

#### is SST token

##### SakeSwap Slippage Token

### SakeSwapERC20

#### is SLP

##### Sakeswap LP token

#### ERC 20 functions and\.\.\.

##### function permit

###### approve by signature

### SakeSwapPair

#### modified UniswapV2Pair

#### is is SakeSwapERC20

#### unlike UniswapV2Pair

##### new functions

###### // public/external writes to the storage<br/>function dealSlippageWithIn\(path, amountIn, to, ifmint\)<br/>function dealSlippageWithOut\(path, amountIn, to, ifmint\)<br/><br/>// public/external view<br/>function getVirtualPrice\(\)<br/>function getTokenMarketPrice\(token\)<br/>function getAmountOutMarket\(token, amountIn\)<br/>function getAmountInMarket\(token, amountOut\)<br/>function getAmountOutPool\(token, amountIn\)<br/>function getAmountInPool\(token, amountOut\)<br/>function getAmountOutFinal\(token, amountIn\)<br/>function getAmountInFinal\(token, amountOut\)<br/><br/>// internal<br/>function \_updateVirtualPrice<br/>function \_getToken0MarketPrice<br/>function \_getAmountOut<br/>function \_getAmountIn<br/>function getAmountOutReal<br/>function getAmountInReal<br/>
> align=`left`


##### new storage vars

###### uint224 private virtualPrice;<br/>uint32 private lastPriceTime;

###### SakeSwapSlippageToken public stoken

##### modified functions

###### function mint\(address to\)

####### address migrator = ISakeSwapFactory\(factory\)\.migrator\(\)

###### function initialize

####### stoken = new SakeSwapSlippageToken\(0\);

###### function swap

####### \_updateVirtualPrice\(\_reserve0, \_reserve1\);

### SakeSwapFactory

### SakeSwapRouter

## Migrator

### Migrates LP tokens

#### which users have already deposited

##### to SakeMaster

##### which SakeMaster holds

###### in Uni/Sushi pairs

#### from Uni/Sushi factory

##### UniswapV2Factory

#### to SakeSwapFactory

##### same SakeSwap factory for two Migrator instances

### instances

#### Migrate\-Uniswap

##### "orig": Uniswap factory

###### UniswapV2Factory

##### "new": SakeSwap factory

#### Migrate\-Sushiswap

##### "orig": SushiSwap factory

###### clone of UniswapV2Factory

##### "new": SakeSwap factory

#### an instance for a pair of factories

##### new factory

##### old factory

### function migrate\(ISakeSwapPair orig\)

#### only Chief may run

#### notBeforeBlock

#### \`orig\` Pair from Uni/Sushi factory

#### creates SakeSwapPair

##### on SakeSwapFactory

##### if not exists

#### burns \`orig\` LP tokens

##### transfers "old" LP tokens

###### from SakeMaster

###### to \`orig\` Pair

##### \.\.\. and burns "old" LP tokens

##### receives underlying asset tokens

#### mints LP tokens on SakeSwapPair

##### transfers underlying asset tokens

### works with Factories

### implements "interfact IMigratorChef"

#### function migrate\(ISakeSwapPair orig\)

##### explicit

#### uint256 public desiredLiquidity

##### implicit

## SakeSwapMigrator

### Migrate user' UniSwap/SushiSwap LP tokens directly to SakeSwap LP tokens

#### unlike Migrator

##### with Migrator

###### user has already deposited

####### with SakeMaster

####### his/her "old" LP tokens

###### owner migrates "old" LP tokens

####### of all users

##### with SakeSwapMigrator

###### user may migrate own "old" LP token

### for UniswapV2 routers

### Works with Routers

#### from "old" router

##### "removeLiquidity"

#### to "new" router

##### "addLiquidity"

#### one instance

##### for two "old" routers

###### SushiSwap router

###### Uniswap router

##### one "new" router

###### SakeSwap router

### Analog to SushiSwapMigratorV2

####     function migrate\(tokenA, tokenB, uint liquidity, amountAMin, amountBMin, deadline\)

### "migrate" functions

#### function migrateUniswap\(token0, token1, value\)

#### function migrateSushiSwap\(token0, token1, value\)

#### function migrateUniswapWithPermit

#### function migrateSushiSwapWithPermit

#### any "old" LP token holder can call

#### internally call

##### function \_migrate\(IRouter router, ISakeSwapERC20 pair, address token0, address token1, uint256 value\)

###### pair\.transferFrom\(msg\.sender, address\(this\), value\)

###### router\.removeLiquidity\(\.\.\., address\(this\), value\)

###### token0\.approve\(kingRouter, bal0\);<br/>token1\.approve\(kingRouter, bal1\);

###### kingRouter\.addLiquidity\(\.\.\., msg\.sender\)

## SakeSwapBatchTrade
> leftSide=`true`


## StakingRewards
> leftSide=`true`


### UniStake\.sol
